We will be building and enhancing on the IronLibary for the remainder of the cohort.

We start with the base objectives of a library: Books. We will build upon this throughout the cohort.

Delivery

Turn in both a link to the GitHub Repo and the Heroku instance.

Normal Mode

You must use the Pull Request workflow to bring features into your master branch
Create a Rails application which can manage (CRUD) a collection of books, each with an Author. A Book will have a title, a photo_url, a price. The Author should have a first_name, last_name, and a bio.
You should be able to manage the books, select an author
It should be styled with Bootstrap or custom.
For the README.md, add screenshots, an MIT LICENSE, and a description of what the app can do.
Deploy the application to Heroku.
Epic Mode

Research the mechanize gem, which enables you to scrape a webpage. Then, scrape the best selling books of 2015/2016 from http://www.amazon.com/gp/bestsellers/2015/books/ and build your Bookshelf from it.

Extra Resources:

http://choosealicense.com/
http://www.take-a-screenshot.org/
http://www.cockos.com/licecap/ (animated gif creator)
http://screencast-o-matic.com (15 minute screencast creator)


TESTING

 Testing is way super important in creating maintainable applications -- that is, applications that don't seem to break every time you use them.

Rails and Ruby have testing built in; you'll create a Rails app that tests itself.

Update your iron-library by adding automated testing
Adding minitest-rails-capybara to your gemfile, write a Feature test that describes the behavior when you add a book
It should start on the homepage, click "Add new book", fill in the form, hit submit, and test that you see the title on the homepage
I should run "rake" and see the tests run

AUTHENTICATION
Authentication (and protecting content) is very very common.

Write a feature test to your iron-library that confirms the following workflow (in a pull request):

Visit the root path and see some books
Click on a book's title
I should be on the sign in page
I enter the correct username and password
(back on the root path) I click on a book's title
I should be on the book's show page and can see the title
Store the password using has_secure_password
Epic Mode

Instead of redirecting me to the root path after signing up, end up on the book's title page (the page that was requested)
Let the user sign-up in addition to signing in
API to enable users to checkout a book

Another part of the organization is building an iPhone application to allow people to checkout their library books. We need to enhance the IronLibrary to allow the iphone app to check out said books.

Deliverables:

Link to your IronLibrary GitHub Repo
Link to your Heroku instance
Requirements:

Rails app should be functional with current capabilities and passing tests
Add the following endpoints and functionality
You should have validations on the checkout
User has_many :books, through: :checkouts

(optional): Add a feature test and/or a controller test

Books

GET /api/books -> List the books in your library
GET /api/books/:id -> Detail for a specific book
POST /api/checkout -> Checkout a book, given the parameter of a username and the book_id
POST /api/checkin -> Check-in a book, given the parameter of a username and the book_id
Checkout Endpoint

Should return a 201 if the checkout was created along with the JSON for both the book and the user
Should return a 422 if the checkout cannot be completed along with the errors for the checkout
A book should not be able to be checked out if it is already checked out
Notes

You don't have to do authentication on the API just yet. That's in v2.
Helpful Links:

http://httpstat.us/
https://github.com/okitan/capybara-json
https://www.getpostman.com/
